swagger: '2.0'
info:
  version: '2.0.0'
  title: 'AvaTax 16 API [Deprecated]'
  description: |
    ## This API has been deprecated. For new integrations, please use the [AvaTax API](http://developer.avalara.com/api-documentation/avatax-15-api/getting-started)
    The Tax API is used to calculate tax and record transactions for tax purposes. Tax can be calculated on sales, purchases, and transfer transactions.
    
    There are two *record types* the Tax API manages Tax Calculation Records and Tax Transaction Records.
    
    When a user of the Tax API simply wants to calculate tax on a transaction, but does not intend to include that transaction in a future filing (such as for quotes or orders), they would create a "tax calculation record" by using the /calculations URL.
    
    On the other hand, if a user wants to calculate tax on a transaction to include in a future filing (such as for invoices), they would create a "tax transaction record" by using the /transactions URL.
    
    The request message format, called a TaxDocument, is identical for both tax calculation records and tax transaction records except that documentCode is not required for calculations.
    
    The response message format is the same as the request message format except that in the case of the response message, tax information has been inserted into the message in context of where the tax applies.
    
    A TaxDocument captures the details of a transaction. 
    
    If you would like to test these operations with prepopulated sample data, see the provided Postman collection: [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/90894f39ff43f3cb0fe3)
    
    To run these tests, you will need a valid account. To sign up for a trial account, go [here](http://developer.avalara.com/api-documentation/avatax-16-api/get-api-key).

    ### Authentication
    The Authorization header is used to identify the actor (person or system) making the request. The value is of the format “ AvalaraAuth (access info)”, where access info is the generated API key for the actor making the call. An API Key can be generated through the Customer Portal.
    For example: `Authorization:  AvalaraAuth MmVhZDk4YzEtZWNiZi00NzA4LThkODYtYjAxYWY4YmMxM2U1`

  contact:
    name: Avalara Support
    email: support@avalara.com
    url: http://help.avalara.com
host: tax.api.avalara.com
basePath: /v2
schemes:
  - https
consumes:
  - application/json; document-version=1
produces:
  - application/json
paths:
  /calculations:
    post: 
      summary: Create a Calculation
      description:  Use this resource to calculate tax without creating a reportable transaction. This should be used when quoting a tax amount to a user before completing a sale. Making multiple POSTs to the /calculations service with the same companyCode and documentCode will result in the creation of a calculation record on the first call and then updates to that calculation record on subsequent calls.
      operationId: createCalculation
      parameters:
        - $ref: '#/parameters/Authorization'
        - $ref: '#/parameters/User-Agent'
        - $ref: '#/parameters/Content-Type'
        - name: TaxDocument
          in: body
          description: The document on which tax should be calculated
          required: true
          schema: 
            $ref: '#/definitions/TaxDocument'
      responses:
        '200':
          description: "Returned when the calculation was successful."
          schema:
            $ref: '#/definitions/TaxDocument'
        '400':
          description: "Returned if a member of the request is invalid."
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: "Returned if the HTTP Authorization header failed to validate."
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: "Returned if the actor identified by the HTTP Authorization header is not authorized to perform this action."
          schema:
            $ref: '#/definitions/Error'
            
  "/calculations/account/{accountId}/company/{companyCode}/{transactionType}/{documentCode}":
    get: 
      summary: Get a Calculation
      description: |
       This is how Avatax customers can retrieve their calculations. The values for *companyCode* and *documentCode* are assigned by the calling application and are passed to /calculations service in the body of the request when the calculation was generated. The *transactionType* component is passed by the calling application and must be one of "Sale", "Purchase" or "Transfer". The most recent version of the calculation is retrieved..
      operationId: getCalculation
      parameters:
        - $ref: '#/parameters/Authorization'
        - $ref: '#/parameters/User-Agent'
        - $ref: '#/parameters/Content-Type'
        - name: accountId
          in: path
          description: "This string is a UUID issued by Avalara to identify the Avalara account that owns the company identified by the companyCode."
          required: true
          type: string
        - name: companyCode
          in: path
          description: "This is a code maintained by the client application to uniquely identify the party on whose behalf we are recording the tax transaction record in the context of an Account. It is unique within the context of an Account"
          required: true
          type: string 
        - name: transactionType
          in: path
          description: "This string indicates the type of the transaction. It must be one of 'Sale', 'Purchase' or 'Transfer'."
          required: true
          type: string      
        - name: documentCode
          in: path
          description: "This is a code maintained by the client application to uniquely identify a transaction. It will typically be an invoice number, receipt number, returned merchandise authorization number, etc. This field is REQUIRED"
          required: true
          type: string 
      responses:
        '200':
          description: "Successful response"
          schema:
            $ref: '#/definitions/TaxDocument'
        '400':
          description: "Returned if a member of the request is invalid"
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: "Returned if the HTTP Authorization header failed to validate."
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: "Returned if the actor identified by the HTTP Authorization header is not authorized to perform this action."
          schema:
            $ref: '#/definitions/Error'
  "/calculations/account/{accountId}/company/{companyCode}/{transactionType}":
    get: 
      summary: Get a List of Calculations by Type
      description: |
        
        This is how Avatax customers can retrieve a list of all their tax calculation records. The value for companyCode is assigned by the calling application and is passed to /calculations in the body of the request when the calculation was generated.
      operationId: getCalculationsByType
      parameters:
        - $ref: '#/parameters/Authorization'
        - $ref: '#/parameters/User-Agent'
        - $ref: '#/parameters/Content-Type'
        - name: accountId
          in: path
          description: "This string is a UUID issued by Avalara to identify the Avalara account that owns the company identified by the companyCode."
          required: true
          type: string
        - name: companyCode
          in: path
          description: "This is a code maintained by the client application to uniquely identify the party on whose behalf we are recording the tax transaction record in the context of an Account. It is unique within the context of an Account"
          required: true
          type: string 
        - name: transactionType
          in: path
          description: "This string indicates the type of the transaction. It must be one of 'Sale', 'Purchase' or 'Transfer'."
          required: true
          type: string  
        - name: limit
          in: query
          description: "This is the maximum number of records that should be returned by this call."
          required: false
          type: integer 
        - name: skip
          in: query
          description: "The search will return up to limit records starting from the first record after 'skip' * 'limit' records are skipped."
          required: false
          type: integer
        - name: startDate
          in: query
          description: "This is the first date to include in the search."
          required: false
          type: integer
        - name: endDate
          in: query
          description: "This is the last date to include in the search."
          required: false
          type: integer
        - name: status
          in: query
          description: "This is the list of tax transaction record states to include in the search. Ccomma separated list of tax transaction record states, 'Recorded','Voided','Reconcile'd,'Filed','FiledByAvalara')"
          required: false
          type: string
      responses:
        '200':
          description: "Successful response"
          schema:
            $ref: '#/definitions/TaxDocument'
        '400':
          description: "Returned if a member of the request is invalid"
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: "Returned if the HTTP Authorization header failed to validate."
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: "Returned if the actor identified by the HTTP Authorization header is not authorized to perform this action."
          schema:
            $ref: '#/definitions/Error'
            
  "/calculations/account/{accountId}/company/{companyCode}/{transactionType}/{existingDocumentCode}/transactions":
    post: 
      summary: Create a Transaction from a Calculation
      description: |
        
        It may sometimes be convenient to create a tax transaction record directly from a previous tax calculation record. Perhaps an unchanged order is now to be invoiced, for example. 
        
        Tax transaction records can be created from tax calculation records either with a recalculation of the tax (this should be the most common situation) or without recalculation of the tax (this is unusual).

      operationId: createTransactionFromCalculation
      parameters:
        - $ref: '#/parameters/Authorization'
        - $ref: '#/parameters/User-Agent'
        - $ref: '#/parameters/Content-Type'
        - name: accountId
          in: path
          description: "This string is a UUID issued by Avalara to identify the Avalara account that owns the company identified by the companyCode."
          required: true
          type: string
        - name: companyCode
          in: path
          description: "This is a code maintained by the client application to uniquely identify the party on whose behalf we are recording the tax transaction record in the context of an Account. It is unique within the context of an Account"
          required: true
          type: string 
        - name: transactionType
          in: path
          description: "This string indicates the type of the transaction. It must be one of 'Sale', 'Purchase' or 'Transfer'."
          required: true
          type: string      
        - name: existingDocumentCode
          in: path
          description: "This is a code maintained by the client application to uniquely identify a transaction. It will typically be an invoice number, receipt number, returned merchandise authorization number, etc. This field is REQUIRED"
          required: true
          type: string 
        - name: createTransactionRequest
          in: body
          schema:
            $ref: '#/definitions/createTransactionRequest'
      responses:
        '200':
          description: "Successful response"
          schema:
            $ref: '#/definitions/TaxDocument'
        '400':
          description: "Returned if a member of the request is invalid"
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: "Returned if the HTTP Authorization header failed to validate."
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: "Returned if the actor identified by the HTTP Authorization header is not authorized to perform this action."
          schema:
            $ref: '#/definitions/Error'
            
  /transactions:
    post: 
      summary: Create a Transaction
      description: |
       
       The address to use for generating tax transaction records. Tax transaction records are meant to be used to calculate tax for inclusion in client system transaction documents. Tax transaction records can be retrieved later to assist with tax remittance and reconciliation.
       
       To simply calculate tax associated with a transaction, use /calculations instead.
       
       To generate a tax transaction record, AvaTax requires a tax document in a JSON element in the request body
       
       A POST to /transactions always recalculates the tax using the information in the request.

       If there is no tax transaction record with the combination of accountId, companyCode and documentCode already in the tax transaction record DB for this account, it will be created and the call will return 201.

       If there is a tax transaction record with the combination of accountId, companyCode and documentCode already in the tax transaction record DB for this account, it will be updated and the call will return 200.
       
       A POST to https://tax.api.avalara.com/transactions is really shorthand for a POST to https://tax.api.avalara.com/transactions/account/ _accountId_ /company/ _companyCode_ / _documentCode_ /versions where _accountId_, _companyCode_ and _documentCode_ are the respective values from the request body and will always (subject to passing error checking) result in a new version of the tax transaction record being created at that location.

      operationId: createTransaction
      parameters:
        - $ref: '#/parameters/Authorization'
        - $ref: '#/parameters/User-Agent'
        - $ref: '#/parameters/Content-Type'
        - name: taxDocument
          in: body
          description: The document on which tax should be calculated
          required: true
          schema: 
            $ref: '#/definitions/TaxDocument'
      responses:
        '200':
          description: "Returned when the calculation was successful."
          schema:
            $ref: '#/definitions/TaxDocument'
        '400':
          description: "Returned if a member of the request is invalid"
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: "Returned if the HTTP Authorization header failed to validate."
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: "Returned if the actor identified by the HTTP Authorization header is not authorized to perform this action."
          schema:
            $ref: '#/definitions/Error'

  "/transactions/account/{accountId}/company/{companyCode}":
    get: 
      summary: Get a List of Transactions
      description: |
        
        This is how Avatax customers can retrieve a list of their tax transaction records.
        
        The value for *companyCode* is assigned by the calling application and is passed to /transactions in the body of the request when the tax transaction record was generated.

      operationId: getTransactionList
      parameters:
        - $ref: '#/parameters/Authorization'
        - $ref: '#/parameters/User-Agent'
        - $ref: '#/parameters/Content-Type'
        - name: accountId
          in: path
          description: "This string is a UUID issued by Avalara to identify the Avalara account that owns the company identified by the companyCode."
          required: true
          type: string
        - name: companyCode
          in: path
          description: "This is a code maintained by the client application to uniquely identify the party on whose behalf we are recording the tax transaction record in the context of an Account. It is unique within the context of an Account"
          required: true
          type: string 
      responses:
        '200':
          description: "Successful response"
          schema:
            $ref: '#/definitions/TaxDocument'
        '400':
          description: "Returned if a member of the request is invalid"
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: "Returned if the HTTP Authorization header failed to validate."
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: "Returned if the actor identified by the HTTP Authorization header is not authorized to perform this action."
          schema:
            $ref: '#/definitions/Error'
            
  "/transactions/account/{accountId}/company/{companyCode}/{transactionType}":
    get: 
      summary: Get a List of Transactions by Type
      description: |
        This is how Avatax customers can retrieve a list of their tax transaction records.
        
        The value for *companyCode* is assigned by the calling application and is passed to /transactions in the body of the request when the tax transaction record was generated.
      operationId: getTransactionListByType
      parameters:
        - $ref: '#/parameters/Authorization'
        - $ref: '#/parameters/User-Agent'
        - $ref: '#/parameters/Content-Type'
        - name: accountId
          in: path
          description: "This string is a UUID issued by Avalara to identify the Avalara account that owns the company identified by the companyCode."
          required: true
          type: string
        - name: companyCode
          in: path
          description: "This is a code maintained by the client application to uniquely identify the party on whose behalf we are recording the tax transaction record in the context of an Account. It is unique within the context of an Account"
          required: true
          type: string 
        - name: transactionType
          in: path
          description: "This string indicates the type of the transaction. It must be one of 'Sale', 'Purchase' or 'Transfer'."
          required: true
          type: string  
        - name: limit
          in: query
          description: "This is the maximum number of records that should be returned by this call."
          required: false
          type: integer 
        - name: skip
          in: query
          description: "The search will return up to limit records starting from the first record after 'skip' * 'limit' records are skipped."
          required: false
          type: integer
        - name: startDate
          in: query
          description: "This is the first date to include in the search."
          required: false
          type: integer
        - name: endDate
          in: query
          description: "This is the last date to include in the search."
          required: false
          type: integer
      responses:
        '200':
          description: "Successful response"
          schema:
            $ref: '#/definitions/TaxDocument'
        '400':
          description: "Returned if a member of the request is invalid"
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: "Returned if the HTTP Authorization header failed to validate."
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: "Returned if the actor identified by the HTTP Authorization header is not authorized to perform this action."
          schema:
            $ref: '#/definitions/Error'

  "/transactions/account/{accountId}/company/{companyCode}/{transactionType}/{documentCode}":
    get: 
      summary: Get a Transaction
      description: |

        This is how Avatax customers can retrieve their individual transactions.
        
        The values for *companyCode* and *documentCode* are assigned by the calling application and are passed to /transactions in the body of the request when the tax transaction record was generated.  The *transactionType* component is passed by the calling application and must be one of "Sale", "Purchase" or "Transfer".
        The most recent version of the tax transaction record is retrieved.
      operationId: getTransaction
      parameters:
        - $ref: '#/parameters/Authorization'
        - $ref: '#/parameters/User-Agent'
        - $ref: '#/parameters/Content-Type'
        - name: accountId
          in: path
          description: "This string is a UUID issued by Avalara to identify the Avalara account that owns the company identified by the companyCode."
          required: true
          type: string
        - name: companyCode
          in: path
          description: "This is a code maintained by the client application to uniquely identify the party on whose behalf we are recording the tax transaction record in the context of an Account. It is unique within the context of an Account"
          required: true
          type: string 
        - name: transactionType
          in: path
          description: "This string indicates the type of the transaction. It must be one of 'Sale', 'Purchase' or 'Transfer'."
          required: true
          type: string      
        - name: documentCode
          in: path
          description: "This is a code maintained by the client application to uniquely identify a transaction. It will typically be an invoice number, receipt number, returned merchandise authorization number, etc. This field is REQUIRED"
          required: true
          type: string 
      responses:
        '200':
          description: "Successful response"
          schema:
            $ref: '#/definitions/TaxDocument'
        '400':
          description: "Returned if a member of the request is invalid"
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: "Returned if the HTTP Authorization header failed to validate."
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: "Returned if the actor identified by the HTTP Authorization header is not authorized to perform this action."
          schema:
            $ref: '#/definitions/Error'

  "/transactions/account/{accountId}/company/{companyCode}/{transactionType}/{documentCode}/source":
    get: 
      summary: Get a Transaction Input
      description: |
       
       This is how Avatax customers can retrieve their original transaction request.
       
       The values for *companyCode* and *documentCode* are assigned by the calling application and are passed to /transactions service in the body of the request when the transaction was generated.
       
       The *transactionType* component is passed by the calling application and must be one of "Sale", "Purchase" or "Transfer".
       
       The most recent version of the transaction request is retrieved.

      operationId: getTransactionInput
      parameters:
        - $ref: '#/parameters/Authorization'
        - $ref: '#/parameters/User-Agent'
        - $ref: '#/parameters/Content-Type'
        - name: accountId
          in: path
          description: "This string is a UUID issued by Avalara to identify the Avalara account that owns the company identified by the companyCode."
          required: true
          type: string
        - name: companyCode
          in: path
          description: "This is a code maintained by the client application to uniquely identify the party on whose behalf we are recording the tax transaction record in the context of an Account. It is unique within the context of an Account"
          required: true
          type: string 
        - name: transactionType
          in: path
          description: "This string indicates the type of the transaction. It must be one of 'Sale', 'Purchase' or 'Transfer'."
          required: true
          type: string      
        - name: documentCode
          in: path
          description: "This is a code maintained by the client application to uniquely identify a transaction. It will typically be an invoice number, receipt number, returned merchandise authorization number, etc. This field is REQUIRED"
          required: true
          type: string 
      responses:
        '200':
          description: "Successful response"
          schema:
            $ref: '#/definitions/TaxDocument'
        '400':
          description: "Returned if a member of the request is invalid"
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: "Returned if the HTTP Authorization header failed to validate."
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: "Returned if the actor identified by the HTTP Authorization header is not authorized to perform this action."
          schema:
            $ref: '#/definitions/Error'
            
  "/transactions/account/{accountId}/company/{companyCode}/{transactionType}/{documentCode}/stateTransitions":
    post: 
      summary: Change a Transaction State
      description: |
       
       Tax transaction record states are managed by the Avalara services. Certain events may cause transitions between the states. The state of a tax transaction record affects whether it is included in tax filing and whether it can be modified.
       
       Transactions can be in one of five states -
       
       - Recorded - Transactions in this state have been recorded in the Avalara system. They can be edited. They should be included in an upcoming tax filing.
       - Voided - Transactions in this state have been recorded in the Avalara system. They cannot be edited. They will not be included in tax filing.
       - Reconciled - Transactions in this state have been recorded in the Avalara system. They cannot be edited. They are likely to be included in a tax filing shortly.
       - Filed - Transactions in this state have been recorded in the Avalara system. They cannot be edited. They are likely to have been included in a tax filing by the client systems.
       - FiledByAvalara - Transactions in this state have been recorded in the Avalara system. They cannot be edited. They have been included in a tax filing by Avalara systems.
       
       The States API is used to record significant events associated with state transitions of the tax transaction record.
       
       Supported events are -
       
       - Voided - Send this event to a Recorded tax transaction record to mark it as voided.
       - UnVoided - Send this event to a Voided tax transaction record to mark it as recorded.       
       - Reconciled - Send this event to a Recorded tax transaction record to indicate that it has been reconciled with client systems and to prevent it from being edited prior to filing. This is useful when a transaction will be filed and you do not want it to change again to facilitate auditing and reconciliation.
       - UnReconciled - Send this event to a Reconciled tax transaction record to indicate that it has not been reconciled and may need to be edited. This is useful when a Tax transaction was erroniously put into the reconciled state.
       - Filed - Send this event to a Reconciled transaction to indicate that it has been part of a tax filing by the client system. 
       - UnFiled - Send this event to a Filed transaction to indicate that it has NOT been part of a tax filing by the client system.
       - FiledbyAvalara - his event can only be sent by Avalara  

      operationId: changeTransactionState
      parameters:
        - $ref: '#/parameters/Authorization'
        - $ref: '#/parameters/User-Agent'
        - $ref: '#/parameters/Content-Type'
        - name: accountId
          in: path
          description: "This string is a UUID issued by Avalara to identify the Avalara account that owns the company identified by the companyCode."
          required: true
          type: string
        - name: companyCode
          in: path
          description: "This is a code maintained by the client application to uniquely identify the party on whose behalf we are recording the tax transaction record in the context of an Account. It is unique within the context of an Account"
          required: true
          type: string 
        - name: transactionType
          in: path
          description: "This string indicates the type of the transaction. It must be one of 'Sale', 'Purchase' or 'Transfer'."
          required: true
          type: string      
        - name: documentCode
          in: path
          description: "This is a code maintained by the client application to uniquely identify a transaction. It will typically be an invoice number, receipt number, returned merchandise authorization number, etc. This field is REQUIRED"
          required: true
          type: string 
        - name: stateChangeRequest
          in: body
          description: ""
          required: true
          schema:
            $ref: '#/definitions/stateChangeRequest'
      responses:
        '200':
          description: "Successful response"
          schema:
            $ref: '#/definitions/TaxDocument'
        '400':
          description: "Returned if a member of the request is invalid"
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: "Returned if the HTTP Authorization header failed to validate."
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: "Returned if the actor identified by the HTTP Authorization header is not authorized to perform this action."
          schema:
            $ref: '#/definitions/Error'
        
  /address/account/{accountId}/company/{companyCode}/validshippingaddresses:
    post: 
      summary: Validate an Address
      description: |
        
        This function is to validate a given shipping address.
      operationId: validateAddress
      parameters:
        - $ref: '#/parameters/Authorization'
        - $ref: '#/parameters/User-Agent'
        - $ref: '#/parameters/Content-Type'
        - name: accountId
          in: path
          description: "This string is a UUID issued by Avalara to identify the Avalara account that owns the company identified by the companyCode."
          required: true
          type: string
        - name: companyCode
          in: path
          description: "This is a code maintained by the client application to uniquely identify the party on whose behalf we are recording the tax transaction record in the context of an Account. It is unique within the context of an Account"
          required: true
          type: string 
        - name: address
          in: body
          description: The address that requires validation.
          required: true
          schema: 
            $ref: '#/definitions/address'
      responses:
        '200':
          description: "Successful response"
          schema:
            $ref: '#/definitions/address'
        '400':
          description: "Returned if a member of the request is invalid"
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: "Returned if the HTTP Authorization header failed to validate."
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: "Returned if the actor identified by the HTTP Authorization header is not authorized to perform this action."
          schema:
            $ref: '#/definitions/Error'
                        

######################################################################

parameters:
  Content-Type:
    name: Content-Type
    type: string
    required: true
    in: header
    description: "The content type header is used by the client to tell the server how to interpret the message body. We set this to application/json, but we also add a parameter called 'document-version' indicating the version of the tax transaction record format. This parameter is required. If this parameter is not specified an error will be returned by the service. e.g. `application/json; document-version=1`"
  User-Agent:
    name: User-Agent
    type: string
    required: true
    in: header
    description: "The user agent header is used to indicate the technology of the client application (or connector). This is a string that is built into a connector or issued to an SDK partner when they sign up to use the SDK. e.g. `Drupal Connector v6.2`"
  Authorization:
    name: Authorization
    required: true
    type: string
    in: header
    description: |
      The Authorization header is used to identify the actor (person or system) making the request. The value is of the format 'AvalaraAuth accessKey', where accessKey identifies the actor making the call. The access info is issued by avalara.com when the user registers for an access to a service. e.g. `AvalaraAuth MmVhZDk4YzEtZWNiZi00NzA4LThkODYtYjAxYWY4YmMxM2U1`
      
######################################################################

definitions:
  createTransactionRequest:
    required:
      - documentCode
    properties:
      recalculate:
        description: "Determines if tax should be recalculated when creating the transaction. If omitted, will default to `true`."
        type: boolean
        default: true
      documentCode:
        description: "The new documentCode to be used for the transaction record."
        type: string
      comment:
        description: "An optional comment that will be recorded with the event for audit purposes."
        type: string
  stateChangeRequest:
    required:
      - type
      - comment
    properties:
      type:
        description: "This is a string with one of the following values: 'Voided', 'UnVoided', 'Reconciled', 'UnReconciled', 'Filed', 'UnFiled' "
        type: string
      comment:
        description: "This is a string that will be recorded along with the event for audit purposes."
        type: string 
  TaxDocument:
    required:
      - header
      - lines
    properties:
      header:
        $ref: '#/definitions/header'
      lines:
        type: array
        description: This section contains the details of the line items associated with the transaction. 
        items:
          $ref: '#/definitions/line'
      calculatedTaxSummary:
        $ref: '#/definitions/calculatedTaxSummary'
      processingInfo:
        $ref: '#/definitions/processingInfo'   
      feedback:
          $ref: '#/definitions/feedback'
          
  feedback:
    type: object
    description: This section allows the caller to provide feedback on their experience of the API. Specifically, the latency experienced by the calling application for the previous request. 
    properties:
      latencyData:
        type: object
        description: Latency feedback for the transaction.
        properties:
          latency:
            type: integer
            description: The latency in miliseconds for a previous call from the client perspective.
  header:
    description: This section contains information relating to the transaction as a whole - who are the parties to the transaction, when did it occur, and so on 
    required:
      - accountId
      - companyCode
      - transactionType
      - customerCode
      - defaultLocations
      - transactionDate
      - documentCode
    properties:
      accountId: 
        type: string
        description: "This string is a UUID issued by Avalara to identify the Avalara account that owns the company identified by the companyCode on the next line"
        example: "895d52b1f3c54696a8644eded8e32ee4"
      companyCode:
        type: string
        description: "This string is a code maintained by the client application to uniquely identify the company for which this transaction is being recorded. It is unique within the context of an Account. It will be limited to 60 characters when creating a Company"
        maxLength: 60
        example: A1 Boat
      accountingEntityCode:
        type: string
        maxLength: 60
        description: "This string is a code maintained by the client application uniquely identify the accounting entity for which this transaction is being recorded. It is unique within the context of an Account. It will be limited to 60 characters when creating a Company"
        example: A1 Boat
      transactionType:
        type: string
        description: "This string indicates the type of transaction for which tax should be calculated. The value must be either 'Sale' or 'Purchase'."
        example: Sale
      documentCode:
        type: string
        description: "This string is a code maintained by the client application to uniquely identify a document in the client's systems. It will typically be an invoice number, receipt number, returned merchandise authorization number, etc. documentCode is required for transactions. It is optional but strongly recommended for calculations - if omitted, the value defaults to a generated GUID."
        maxLength: 63
        example: Invoice:12345
      customerCode:
        type: string
        description: "This string is a code maintained by the client application and recorded in the customer portal to uniquely identify the party with whom the company (identified by companyCode) is transacting. It is unique within the context of a Company."
        maxLength: 256
        example: Argosy Cruises
      vendorCode:
        type: string
        description: "This string is a code maintained by the client application to uniquely identify the party with whom the company (identified by companyCode) is transacting. It is unique within the context of an Account."
        maxLength: 256
        example: A1 Anchors
      transactionDate:
        type: string
        format: date
        description: "This string is the transaction date in ISO 8601 format (which may be different from the date the tax calculation is performed)"
        example: 2014-06-11
      currency:
        type: string
        description: This string is one of the three letter ISO 4217 currency names
        maxLength: 3
        example: USD
      taxCalculationDate:
        type: string
        format: date
        description: "This string is the date, in ISO 8601 format, on which tax is to be calculated for this transaction (normally tax is calculated on the date the transaction is performed as captured in the transactionDate field). This is useful for layaways and other deferred transactions."
        example: 2014-06-11
      companyLocation:
        type: string
        description: "This string contains a previously configured company code which may also have codes needed for tax return purposes. These codes are maintained through the customer portal."
      defaultLocations:
        $ref: '#/definitions/locations' 
      defaultTaxPayerCode:
        type: string
        maxLength: 256
        description: "This string is a code issued by a tax authority to identify a party (typically the customer associated with the customerCode field) that is exempt from tax for this type of transaction. This will apply to all lines in this transaction that don't otherwise override it."
        example: A2323223
      defaultBuyerType:
        type: string
        example: N
        description: "This string captures the type of buyer associated with all lines in the transaction that don't otherwise override this value. Valid values are: A - Federal Government, B - State/Local Govt., C - Tribal Government, D - Foreign Diplomat, E - Charitable Organization, F - Religious/Education, L - Other, N - Local Government, R - Non-resident (Canada)"
        maxLength: 64
      defaultUseType:
        type: string
        example: K
        description: "This string captures the type of use associated with all lines in the transaction that don't otherwise override this value. Valid values are: G - Resale, H - Agricultural Production, I - Industrial Prod/Mfg., J - Direct Pay Permit, K - Direct Mail, L - Other, P - Commercial Aquaculture (Canada), Q - Commercial Fishery (Canada)"
        maxLength: 64
      defaultBuyerExemptionType:
        type: string
        example: G
        description: "This string captures the type of use associated with this line in the transaction. Valid values are: G - Resale, H - Agricultural Production, I - Industrial Prod/Mfg., J - Direct Pay Permit, K - Direct Mail, L - Other, P - Commercial Aquaculture (Canada), Q - Commercial Fishery (Canada)"
        maxLength: 64
      purchaseOrderNumber:
        type: string
        example: PO12345
        maxLength: 256
        description: "This is a string representing a purchase order number which might be used to look up a single use tax exemption certification"
      metadata:
        type: array
        description: "This is a collection of MetadataItems (string pairs) which exists to allow callers of the API to set arbitrary information that will be returned in the tax calculation response and which can be used during reporting"
        items: 
          $ref: '#/definitions/metadataItem'
  line:
    required:
      - lineAmount
      - lineCode
    properties:
      lineCode:
        type: string
        maxLength: 512  
        description: "This string is a unique identifier for this line in the transaction"
        example: dkj23
      itemCode: 
        maxLength: 255 
        type: string
        description: "This string is a code maintained by the client application to uniquely identify a product or service. It will likely be a SKU and is required for SST states."
        example: 22456366          
      avalaraGoodsAndServicesType:  
        maxLength: 128 
        type: string
        description: "This string identifies a category of products for tax purposes. It will likely be one of Avalara's standard avalaraGoodsAndServicesTypes, but may be a custom type configured in the Customer Portal. If not specified, itemCode to avalaraGoodsAndServicesType mapping will happen during tax calculation. If itemCode is not mapped and no avalaraGoodsAndServicesType is passed, then the transaction will default to using P0000000."
        example: PC040402    
      avalaraGoodsAndServicesModifierType:  
        maxLength: 128 
        type: string
        description: "Reserved for future use."      
        example: Rental 
        default: Title
      numberOfItems:      
        description: "This decimal captures the number of individual items or units represented by this line. Digits after the decimal point are optional. This should always be positive."
        type: number
        example: 3.15
      lineAmount:   
        description: "This decimal captures the total cost of this line. In its simplest form lineAmount = (item price * numberOfItems). If taxIncluded is 'true', lineAmount = (item price * numberOfItems + tax)."
        type: number
        example: 23.33   
      itemDescription:  
        maxLength: 1024  
        type: string
        description: "This string captures the description of the item represented by this line"
        example: "Men's Adidas FREEFOOTBALL JANEIRINHA Soccer Shoes"   
      lineTaxedDiscount:
        type: number
        example: 23.20
        description: "A discount that should be applied after tax is calculated on the lineAmount. The sign (+/-) should match that of the lineAmount. Taxed discounts include manufacturer's coupons and rebates."
      lineUntaxedDiscount:
        type: number
        example: 23.20
        description: "A discount that should be applied before tax is calculated on the lineAmount. The sign (+/-) should match that of the lineAmount. Untaxed discounts include retails or trade discounts."
      locations:
        type: array
        description: "This element contains a dictionary of locations such as the ShipFrom and ShipTo addresses to be associated with this line. These locations may override those specified in a transaction header. The key for each location in the dictionary is the location 'purpose'. Valid location purposes are 'ShipFrom', 'ShipTo', 'POS', 'POM', 'POO', 'BillingLocation', 'CallPlaced', 'CallReceived', 'ServiceRendered', 'POA' and 'FirstUse'. There can only be one location of a given purpose in the dictionary."
        items: 
          $ref: '#/definitions/location'
      taxPayerCode:
        maxLength: 256 
        type: string
        description: "This string is a code issued by a tax authority to identify a party (typically the customer associated with the customerId field) that is exempt from tax for this type of transaction. This value will override any value set at the transaction level. This field is not currently supported."
        example: A2323223    
      buyerType:  
        type: string
        maxLength: 64  
        description: "This string captures the type of buyer associated with this line in the transaction. See below for valid values, A - Federal Government, B - State/Local Govt., C - Tribal Government, D - Foreign Diplomat, E - Charitable Organization,F - Religious/Education, L - Other, N - Local Government, R - Non-resident (Canada)"
        example: N   
      useType:  
        maxLength: 64  
        type: string
        description: "This string captures the type of use associated with this line in the transaction. See below for valid values G - Resale, H - Agricultural Production, I - Industrial Prod/Mfg., J - Direct Pay Permit, K - Direct Mail, L - Other, P - Commercial Aquaculture (Canada), Q - Commercial Fishery (Canada)"
        example: K   
      buyerExemptionType: 
        maxLength: 64  
        type: string
        description: "This string captures the type of use associated with this line in the transaction. Valid values are: G - Resale, H - Agricultural Production, I - Industrial Prod/Mfg., J - Direct Pay Permit, K - Direct Mail, L - Other, P - Commercial Aquaculture (Canada), Q - Commercial Fishery (Canada)"  
        example: K   
      taxOverrideAmount:
        type: number
        description: "This decimal is the Tax Override Amount which overrides the tax for the line. This may used for imported transactions, returns, and layaways where the tax has already been calculated either by AvaTax or another means. "
        example: 2.53
      taxIncluded:      
        description: "This is a field to indicate whether the extendedPrice includes tax or not and is passed as a string. It must be either 'true' or 'false' if present."
        example: true
        default: false
        type: boolean
      metadata:
        type: array
        description: "This is a collection of MetadataItems (string pairs) which exists to allow callers of the API to set arbitrary information that will be returned in the tax calculation response and which can be used during reporting"
        items: 
          $ref: '#/definitions/metadataItem'        
      calculatedTax:  
        $ref: '#/definitions/calculatedTax'


  metadataItem:
    type: object
    description: "Each MetadataItem in the list is a name / value pair. Examples would be 'customerRef':'12345', 'comment':'this was done to compensate for a previous customer satisfaction issue', 'PurchaseOrder':'PO1232', 'SalesPersonCode':'21123'. MetadataItems can be used in reporting and for reference information."
    properties:
      name:
        type: string
      value: 
        type: string

  locations:
    description: |
      To calculate tax, the tax calculation engine needs to know about the location of the transaction. Sometimes determining these locations is straight forward, as in the case of an item purchased in person at a retail store for immediate consumption (a single POS address would suffice to indicate the origin and destination of the transaction). Other cases are only slightly more complicated, such as when a product is purchased over the phone and shipped from a warehouse to the customer's house. Exactly which locations are required for a given transaction depends on the context of transaction. Specifically, such things as the transactionType, avalaraGoodsAndServicesType, and applicable jurisdictions may influence what location information is required in order to calculate tax. In the case where more than one location of a given category (origin/destination) is associated with a line, the jurisdiction will determine which location is used, and this will be indicated in the calculation response. The locations can be associated at the line level or the line can inherit the location from the header. While no single location property is required, at least one location must be provided for a calculation.
    properties:
      ShipFrom:
        type: object
        description: The origin of the transaction or line item. Will be used as an origin address.
        additionalProperties: 
          $ref: '#/definitions/location'
      CallPlaced:
        type: object
        description: The origin of a phone call.Will be used as an origin address.
        additionalProperties: 
          $ref: '#/definitions/location'
      POM:
        type: object
        description: The point of manufacture of an item. Will be used as an origin address.
        additionalProperties: 
          $ref: '#/definitions/location'
      PointOfManufacture:
        type: object
        description: The point of manufacture of an item. Will be used as an origin address.
        additionalProperties: 
          $ref: '#/definitions/location'
      POA:
        type: object
        description: The point of access to an item. Will be used as an origin address. 
        additionalProperties: 
          $ref: '#/definitions/location'
      PointOfOrderAcceptance:
        type: object
        description: The point of access to an item. Will be used as an origin address. 
        additionalProperties: 
          $ref: '#/definitions/location'
      Dropship:
        type: object
        description: The drop shipment location of an item. Will be used as an origin address.
        additionalProperties: 
          $ref: '#/definitions/location'
      POS:
        type: object
        description: The point of sale of an item. Will be used as both an origin and destination address.
        additionalProperties: 
          $ref: '#/definitions/location'
      PointOfSale:
        type: object
        description: The point of sale of an item. Will be used as both an origin and destination address.
        additionalProperties: 
          $ref: '#/definitions/location'
      ShipTo:
        type: object
        description: The ship to location of an item. Will be used as a destination address.
        additionalProperties: 
          $ref: '#/definitions/location'
      POO:
        type: object
        description: The point of order origin of an item. Will be used as a destination address.
        additionalProperties: 
          $ref: '#/definitions/location'
      PointOfOrderOrigin:
        type: object
        description: The point of order origin of an item. Will be used as a destination address.
        additionalProperties: 
          $ref: '#/definitions/location'
      BillingLocation:
        type: object
        description: The billing location of an item. Will be used as a destination address.
        additionalProperties: 
          $ref: '#/definitions/location'
      CallReceived:
        type: object
        description: The destination of a phone call. Will be used as a destination address.
        additionalProperties: 
          $ref: '#/definitions/location'
      ServiceRendered:
        type: object
        description: The location a service item was rendered. Will be used as a destination address.
        additionalProperties: 
          $ref: '#/definitions/location'
      FirstUse:
        type: object
        description: The location of first use of an item. Will be used as a destination address.
        additionalProperties: 
          $ref: '#/definitions/location'
      AssumedPossession:
        type: object
        description: The assumed possession of an item. Will be used as a destination address.
        additionalProperties: 
          $ref: '#/definitions/location'
  location:
    properties:
      address:
        $ref: '#/definitions/address'
      latLong:
        $ref: '#/definitions/latLong'
      resolutionQuality:
        type: string
        description: "This is an output-only indication of how precisely the location information was able to be translated into a latitude / longitude. It will contain one of the following values: NotCoded (location was not geocoded), External (location was already geocoded on the request), CountryCentroid (Avalara-defined country centroid), RegionCentroid (Avalara-defined state / province centroid), PartialCentroid (geocoded at a level more coarse than a PostalCentroid1), PostalCentroidGood (largest postal code (zip5 in US, left three in CA, etc)), PostalCentroidBetter (better postal code (zip7 in US)), PostalCentroidBest (best postal code (zip9 in US, complete postal code elsewhere)), Intersection (nearest intersection), Interpolated (interpolated to rooftop), Rooftop (assumed to be rooftop level, non-interpolated), Constant (pulled from a static list of geocodes for specific jurisdictions)"
        example: "Rooftop"
  latLong:
    required:
      - latitude
      - longitude
    description: "Latlong contains a latitude and longitude for a location."
    properties:
      latitude: 
        type: number
        description: "The latitude of the transaction"
        example: 47.604813
      longitude: 
        type: number
        description: "The longitude of the transaction"
        example: -122.339811
  address:
    required:
    - line1
    - country
    - zipCode
    description: "This element contains a street or shipping address. The tax calculation service will convert this to a lat/long."
    properties:
      line1:
        type: string
        description: "This string captures the first line of the address"
        maxLength: 256
        example: "1101 Alaskan Way"
      line2:
        type: string
        description: "This string captures the second line of the address"
        maxLength: 256
        example: "Suite 123"
      line3:
        type: string
        description: "This string captures the third line of the address"
        maxLength: 256
        example: "Box 123, Framingham Pigot"
      city:
        type: string
        description: "This string captures the city of the address"
        maxLength: 256
        example: "Seattle"
      state:
        type: string
        description: "This string captures the state of the address."
        example: "WA"
      country:
        type: string
        description: "This string captures the country code in ISO 3166-1 alpha-2 or alpha-3 format"
        example: "USA"
      zipCode:
        type: string
        description: "This string captures the zip code of the address"
        example: "98101"  
      postalCode:
        type: string
        description: "Synonym for zipcode"
        example: "98101"  
      postCode:
        type: string
        description: "Synonym for zipcode"
        example: "98101"  
      municipality:
        type: string
        description: "Synonym for city"
        example: "Seattle"  
      town:
        type: string
        description: "Synonym for city"
        example: "Seattle" 
      province:
        type: string
        description: "Synonym for state"
        example: "WA"
  calculatedTax:
    type: object
    description: "This element contains the calculated tax information for this line item. This element is created by the tax service and overwritten if it exists in a request."
    properties:
      taxByType:
        type: array
        description: "This element breaks out the tax for this line by tax type."
        items:
          properties:
            taxType:
              type: object
              description: "Tax Type"
              example: "Sellers Use"
              properties:
                tax:
                  type: number
                  description: "This decimal captures the total tax applicable for this line"
                  example: 240
      tax:
        type: number
        description: "total tax applicable for this line"
        example: 240  
      details:
        type: array
        description: "List of tax authorities that apply to this line."
        items:
          $ref: "#/definitions/taxAuthority"
      calculatedDetails:
        type: array
        description: "Reserved for future use."
        items:
          $ref: "#/definitions/taxAuthority"
  taxAuthority:
    properties:
      locationType:
        type: string
        description: "This string captures the applicable location type"
        example: "ShipTo"
      jurisdictionName:
        type: string
        description: "This string captures the name of the taxing jurisdiction"
        example: "WASHINGTON"
      jurisdictionType:
        type: string
        description: "This string captures the type of taxing jurisdiction"
        example: "State"
      taxType:
        type: string
        description: "This string captures the type of the tax"
        example: "Sales"
      rateType:
        type: string
        description: "This string captures the type of the rate used"
        example: "Food"
      scenario:
        type: string
        description: "This string captures the transaction scenario used to calculate the tax for this tax type. Scenarios are specific to the tax type. This field provides information about how the tax engine interpreted the transaction information that was passed in."
        example: "Simple Retail"
      subtotalTaxable:
        type: number
        description: "This decimal captures how much of the lineAmount was taxable by this tax"
        example: 4.13
      subtotalExempt:
        type: number
        description: "This decimal captures how much of the lineAmount was non-taxed. This is simply the line amount minus the taxable."
        example: 0
      quantityTaxable:
        type: number
        description: "This decimal captures what numberOfItems was considered taxable while calculating tax"
        example: 0.75
      rate:
        type: number
        description: "This decimal captures the tax rate for this tax."
        example: 0.065
      tax:
        type: number
        description: "The product of subtotalTaxable and rate for rate based calculations and is the product of numberOfItemsTaxable and fee for fee based transactions."
        example: 0.13
      exemptionCode:
        type: string
        description: "This string is required if the exempt flag is present and set to true"
        example: "Certificate on File"
      significantLocations:
        type: array
        description: "List of locations that contributed to the tax determination. Elements in the list will be a subset of the locations associated with this line (i.e.: one or more of 'ShipFrom', 'CallPlaced', 'POM', 'POA', 'DropShip', 'POS', 'ShipTo', 'POO', 'BillingLocation', 'CallReceived', 'ServiceRendered', 'FirstUse'"
        example: "FirstUse"
        items:
          properties:
            location:
              type: string
      fee:
        type: number
        example: 0.10
        description: "This decimal captures the fee for this tax."
      taxRuleType:
        type: string
        description: "The nature of the calculation. Valid values are `No Nexus` For transactions where a tax would have accrued had the vendor declared nexus, `Not Taxable` : For transactions where no tax rules applied (perhaps the prevailing authorities declined to define rules, or perhaps Avalara content just hasn't captured the rules), `Product` : For transactions where a specific product category is exempt from a tax, `Zero Rated` : For transactions where a tax applied, but it was zero rate, `Use` : For transactions that are exempt because of the use to which the goods or services are applied, `Customer` : For transactions that are exempt because of some characteristic of the buyer."
        example: Product
      certificateId:
        type: string
        example: EX-001
        description: "The ID of a certificate that was applied to the transaction. Certificates are managed for customers through the customer portal when configuring a company."
  calculatedTaxSummary:
    type: object
    description: "The calculated tax summary is the rollup of the individual line item tax information."
    properties:
      numberOfLines:
        type: integer
        description: "This integer captures the number of lines in the transaction"
        example: 1
      taxByType:
        type: array
        description: "This element breaks out the tax for this document by tax type"
        items:
          $ref: '#/definitions/taxByType'
      subtotal:
        type: number
        description: "This decimal captures the sum of the lineAmounts reported on each line for this transaction"
        example: 43.50
      totalTax:
        type: number
        description: "This decimal captures the amount of tax due for this transaction."
        example: 4.13
      grandTotal:
        type: number
        description: "This decimal captures the total due to be paid by the purchaser to the seller including tax"
        example: 47.63
  taxByType:
    type: object
    description: "This element is a map keyed on tax type with an element for each type of tax that applied to this line. Each tax type key will refer to an item with following elements."
    properties:
      tax:
        type: number
        description: "The total tax applicable for this tax type for this document."
        example: 4.13
      jurisdictions:
        type: array
        description: "This element is a list of jurisdictions that defined this tax type for this transaction"
        items:
          properties:
            jurisdictionName:
              type: string
              description: "This string captures the name of the taxing jurisdiction"
              example: "WASHINGTON"
            jurisdictionType:
              type: string
              description: "This string captures the type of taxing jurisdictio"
              example: "State"
            tax:
              type: number
              description: "This decimal captures the total tax applicable for this tax type for this jurisdiction for this document"
              example: 4.13
  processingInfo:
    type: object
    description: "This section of a calculation response contains information relating to the mechanics of performing the tax calculation. This section is created by the service during tax calculation."
    properties:
      transactionState:
        type: string
        description: "This string represents the state of the transaction in the Avalara systems. It will have a value equal to the name of one of the states a transaction can be in."
        example: "Recorded"
      versionId:
        type: string
        description: "This string is a unique identifier for the tax calculation."
        example: "895d52b1f3c54696a8644eded8e32ee4"
      formatId:
        type: integer
        description: "This integer represents the format of this transaction, which may be useful for support queries."
        example: 3
      duration:
        type: number
        description: "This decimal represents the number of milliseconds taken to process the tax calculation."
        example: 0.130
      modifiedDate:
        type: string
        description: "This string is the date, in ISO 8601 format, on which the most recent update to this document was posted"
        example: "2014-06-11 19:33:53Z"
      batchId:
        type: string
        description: "This string identifies the batch that this transaction was part of. If the transaction was not part of a batch import, this field is omitted. If the transaction was part of multiple batches, this string identifies the most recent."
        example: "895d52b1f3c54696a8644eded8e32ee4"
      documentId: 
        type: string
        description: "This string identifies the avalara version Id of the original transaction that created the entry"
        example: "895d52b1f3c54696a8644eded8e32ee4"
      message:
        type: string
        description: "This string allows Avalara to pass information back to the caller such as a warning to indicate that the message format used is now deprecated."
        example: "Warning: format 3 as used in this transaction is deprecated by format 4 and may not be supported in the future."      
  Error:
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: object   
