swagger: '2.0'
info:
  description: "This is a proposal for a v2 of the AvaTax REST API. This is a DESIGN DOCUMENT ONLY and is not intended to be used, since this API DOES NOT EXIST. 
    
    * All resources below map DIRECTLY to A16 resources. The request and response payloads are almost identical in format (but favor the flatter A15 style as opposed to the more nested A16 style), with allowances made for the different structures of A15 and A16. 

    * This API is specific to identity operations. For company profile-based operations, see the profile API.

    * Right now, this document only describes basic auth. If we want token-based auth as well, that would just be an additional security scheme.
    
    "
  version: '2.0'
  title: AvaTax v2 REST API Proposal
  termsOfService: 'http://www.avalara.com/terms/'
  contact:
    name: 'For support, visit the Avalara Community'
    url: 'https://community.avalara.com/avalara/category_sets/developers'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: identity.api.avalara.com
basePath: /v2
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
security:
  - basic_auth: []
paths:
  '/all':
    get:
      summary: Error Messages
      description: "The following status codes can be returned by all operations."
      operationId: all
      responses:
        '200':
          description: "Successful operation"
        '401':
          description: "The authorization header was malformed, or the provided credentials were not valid."
          schema:
            $ref: '#/definitions/error'
        '400':
          description: "The request was invalid in form or data, and should be corrected before retrying. Additonal error information is provided in the response body. For tax calculation or address validation, this is returned when tax could not be calculated/ the address could not be validated."
          schema:
            $ref: '#/definitions/error'
        '404':
          description: "The requested resource was not found. This can be returned for CompanyNotFound or DocumentNotFound, or for an invalid DocType specified. Details are provided in the response body."
          schema:
            $ref: '#/definitions/error'
        '503':
          description: "The service is temporarily unavailable."
          schema:
            $ref: '#/definitions/error'
  '/accounts':
    get:
      summary: Retrieve accessible accounts
      operationId: listAccounts
      tags:
        - account
      description: 'Get a list of all accounts the current user has access.'
      responses:
        200:
          description: 'Successful operation'
          schema:
            $ref: '#/definitions/accountList'
  '/accounts/{accountId}':
    parameters:
      - $ref: '#/parameters/accountId'
    get:
      summary: Retrieve account details
      operationId: getAccount
      tags:
        - account
      description: 'Get the details for a specific account. Note that any additional operations on an account should be tied in to ZTB and Registrar, and require further investigation. '
      responses:
        200:
          description: 'Successful operation'
          schema:
            $ref: '#/definitions/companyList'
  '/users':
    get:
      summary: Retrieve a list of users
      operationId: listUsers
      tags:
        - user
      description: 'Get a list of users that fit a set of filter criteria.'
      responses:
        '200':
          description: 'Successful operation'
          schema:
            $ref: '#/definitions/userList'
    post:
      parameters:
        - name: user
          in: body
          required: true
          schema:
            $ref: '#/definitions/user'
      summary: Create a user
      operationId: createUser
      tags:
        - user
      description: 'Create a user'
      responses:
        '200':
          description: 'Successful operation'
          schema:
            $ref: '#/definitions/user'
  '/users/{userId}':
    parameters:
      - $ref: '#/parameters/userId'
    get:
      summary: Get the details for a user
      operationId: getUser
      tags:
        - user
      responses:
        '200':
          description: 'Successful operation'
          schema:
            $ref: '#/definitions/user'

####################################################            
            
securityDefinitions:
  basic_auth:
    type: basic
    description: "You will not be able to make web service calls until you have received an active account number and license key via email, or a username and password from the [sandbox registration](http://developer.avalara.com/getting-started). Authentication is in the format `Basic [account number]:[license key]` encoded to Base64, as per basic access authentication. For example: `Authorization: Basic a2VlcG1vdmluZzpub3RoaW5nMnNlZWhlcmU=`"
###################################################

definitions:
  message:
    properties:
      summary:
        maxLength: 255
        type: string
        example: Company not found.  Verify the CompanyCode.
        description: The message summary in short form.
      details:
        maxLength: 255
        type: string
        example: APITrialCompany
        description: Description of the error or warning.
      refersTo:
        maxLength: 255
        type: string
        example: CompanyCode
        description: The data used during the request that caused the message to be generated.
      source:
        maxLength: 255
        type: string
        example: Avalara.AvaTax.Services.Tax
        description: The internal location that generated the message.
      severity:
        type: string
        example: Error
        description: "Classifies the severity of the message."
        enum:
          - Success
          - Warning
          - Error
          - Exception  
  error:
    properties:
      messages:
        type: array
        items:
          $ref: '#/definitions/message'
  accountList:
    type: array
    items:
      $ref: '#/definitions/account'
  companyList:
    type: array
    items:
      $ref: '#/definitions/company'
  account:
    properties:
      accountId:
        type: number
        format: integer
      name:
        type: string
      statusId:
        type: string
      siteId:
        type: string
      effectiveDate:
        type: string
      endDate:
        type: string
      createdDate:
        type: string
      createdBy:
        type: number
        format: integer
      modifiedDate:
        type: string
      modifiedBy:
        type: number
        format: integer
      services:
        type: array
        items: 
          $ref: '#/definitions/service'
  service:
    properties:
      startDate:
        type: string
      endDate:
        type: string
  company:
    properties:
      accountId:
        type: string
      companyCode:
        type: string
  userId:
    name: userId
    type: string
    in: path
    required: true
    description: "The unique, Avalara-assigned identifier of the user. If you use the special value `self`, everything will operate on the current user. NOTE: is there a way this can be username instead of userId? It's still globally unique."  